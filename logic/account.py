import datetime
import os
import time

import streamlit as st
import sqlite3
from openai import OpenAI

from logic import get_account_info


DATA_DIR = '/disk/data'
os.makedirs(DATA_DIR, exist_ok=True)


@st.dialog("–ò–∑–º–µ–Ω–∏—Ç—å API-–∫–ª—é—á")
def change_api_key():
    new_api_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API-–∫–ª—é—á", type="password")
    checkbox = st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á")

    button_visible = new_api_key != '' and new_api_key is not None and checkbox

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", disabled=not button_visible):

        conn = sqlite3.connect(os.path.join(DATA_DIR, 'logic.db'))
        cur = conn.cursor()
        try:
            cur.execute("UPDATE users SET openai_api_key = ? WHERE user_id = ?", (new_api_key, st.session_state.user_id))
            conn.commit()
            st.session_state.openai_client = OpenAI(api_key=new_api_key)
        except sqlite3.Error as e:
            print(f"Error while updating API key: {e}")
        finally:
            cur.close()
            conn.close()
            st.rerun()


def get_statistics():
    conn = sqlite3.connect(os.path.join(DATA_DIR, 'logic.db'))
    cur = conn.cursor()
    try:
        user_id = st.session_state.user_id
        cur.execute("""
            SELECT 
                (SELECT COUNT(*) FROM chats WHERE user_id = ?) AS chat_count,
                (SELECT COUNT(*) FROM bots WHERE user_id = ?) AS bot_count,
                (SELECT COUNT(*) FROM chat_messages WHERE chat_id IN (SELECT chat_id FROM chats WHERE user_id = ?)) +
                (SELECT COUNT(*) FROM bot_messages WHERE bot_id IN (SELECT bot_id FROM bots WHERE user_id = ?)) AS total_messages;
        """, (user_id, user_id, user_id, user_id))
        result = cur.fetchone()
        return result
    except sqlite3.Error as e:
        print(f"Error while getting statistics: {e}")
    finally:
        cur.close()
        conn.close()
    pass


# @st.dialog("–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä")
def change_avatar():
    st.toast('–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö!', icon="üõ†Ô∏è")
    pass


def change_password():
    st.toast('–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö! –ï—Å–ª–∏ –í—ã '
             '–∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å - –≤—ã–π–¥–∏—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å" –≤ –æ–∫–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.', icon="üõ†Ô∏è")
    pass


@st.dialog("–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
def delete_account():
    st.text("""
        –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç - —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —á–µ–∫–±–æ–∫—Å—ã —Å–Ω–∏–∑—É:
    """)
    st.checkbox(
        "–Ø —Ö–æ—á—É —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Logic, –≤–∫–ª—é—á–∞—è –≤—Å–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á–∞—Ç—ã –∏ –±–æ—Ç—ã", key="delete_account_checkbox_1"
    )
    st.checkbox("–Ø –æ—Å–æ–∑–Ω–∞—é, —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", key="delete_account_checkbox_2")

    button_visible = st.session_state.delete_account_checkbox_1 and st.session_state.delete_account_checkbox_2

    if st.button("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", type="primary", disabled=not button_visible):
        # remove_user_cookies()
        with st.spinner("–£–¥–∞–ª—è–µ–º –í–∞—à –∞–∫–∫–∞—É–Ω—Ç..."):
            time.sleep(1)
            conn = sqlite3.connect(os.path.join(DATA_DIR, 'logic.db'))
            cur = conn.cursor()
            try:
                cur.execute("DELETE FROM chat_messages WHERE chat_id IN (SELECT chat_id FROM chats WHERE user_id = ?)", (st.session_state.user_id,))
                cur.execute("DELETE FROM bot_messages WHERE bot_id IN (SELECT bot_id FROM bots WHERE user_id = ?)", (st.session_state.user_id,))
                cur.execute("DELETE FROM chats WHERE user_id = ?", (st.session_state.user_id,))
                cur.execute("DELETE FROM bots WHERE user_id = ?", (st.session_state.user_id,))
                cur.execute("DELETE FROM users WHERE user_id = ?", (st.session_state.user_id,))
                conn.commit()

                st.session_state.user_id = None
                st.session_state.success_account_deleting = True
                st.rerun()
            except sqlite3.Error as e:
                print(f"Error while deleting user: {e}")
            finally:
                cur.close()
                conn.close()


col1, col2 = st.columns([1, 2], vertical_alignment='center')
avatar = col1.image('assets/user_avatar.png', width=250)
col2.button('', icon=":material/inbox_customize:", on_click=change_avatar)

title = st.empty()
st.divider()

user_info = get_account_info(st.context.cookies.get('ajs_anonymous_id', None))

if user_info:

    user_id, user_token, username, email, password, register_date_str, api_key = user_info
    register_date = datetime.datetime.strptime(register_date_str, '%Y-%m-%d %H:%M:%S.%f')

    title.title(f":gray[–ê–∫–∫–∞—É–Ω—Ç:] {username}")

    chat_count, bot_count, total_messages = get_statistics()

    col1, col2, col3, col4 = st.columns([5, 2, 2, 2])

    col1.metric("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", register_date.strftime('%d.%m.%Y'))
    col2.metric("–ß–∞—Ç–æ–≤", chat_count)
    col3.metric("–ë–æ—Ç–æ–≤", bot_count)
    col4.metric("–°–æ–æ–±—â–µ–Ω–∏–π", total_messages)

    st.caption('Email:')
    with st.container():
        st.text_input(label='Email', value=email, disabled=True, label_visibility='collapsed')

    st.caption('–ü–∞—Ä–æ–ª—å:')
    with st.container():
        col1, col2 = st.columns([8, 1])
        col1.text_input(label='API_KEY', value=password, type="password", disabled=True, label_visibility='collapsed')
        col2.button("", icon=':material/edit:', key='change_password', on_click=change_password)

    st.caption('OpenAI API key:')
    with st.container():
        col1, col2 = st.columns([8, 1])
        col1.text_input(label='API_KEY', value=api_key, disabled=True, label_visibility='collapsed')
        col2.button("", icon=':material/edit:', key='change_api_key', on_click=change_api_key)

    st.write("")

    if st.button("–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", icon=":material/logout:", key='logout'):
        # remove_user_cookies()
        with st.spinner("–í—ã—Ö–æ–¥..."):
            conn = sqlite3.connect(os.path.join(DATA_DIR, 'logic.db'))
            cur = conn.cursor()
            try:
                cur.execute("UPDATE users SET user_token = NULL WHERE user_id = ?", (st.session_state.user_id,))
                conn.commit()
                st.session_state.user_id = None
                st.session_state.success_logout = True
            except sqlite3.Error as e:
                print(f"Error while logout: {e}")
            finally:
                cur.close()
                conn.close()
                st.rerun()

    if st.button("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", type='primary', icon=":material/delete:", key='acc_delete'):
        delete_account()
